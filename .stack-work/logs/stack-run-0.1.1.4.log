Configuring stack-run-0.1.1.4...
Preprocessing executable 'stack-run' for stack-run-0.1.1.4..
Building executable 'stack-run' for stack-run-0.1.1.4..
[1 of 1] Compiling Main             ( src\Main.hs, .stack-work\dist\5c8418a7\build\stack-run\stack-run-tmp\Main.o )

[;1msrc\Main.hs:63:15: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    * Couldn't match type `Distribution.Types.UnqualComponentName.UnqualComponentName'
                     with `[Char]'
      Expected type: IO String
        Actual type: IO
                       Distribution.Types.UnqualComponentName.UnqualComponentName
    * In the expression: findDefault' pr
      In a stmt of a 'do' block:
        if e then
            readFile (pr </> ".stack-work" </> ".stack-run-default")
        else
            findDefault' pr
      In the expression:
        do pr <- fromMaybe (error "No project root found")
                   <$> getCabalProjectRootCurrent
           e <- doesFileExist (pr </> ".stack-work" </> ".stack-run-default")
           if e then
               readFile (pr </> ".stack-work" </> ".stack-run-default")
           else
               findDefault' pr[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m63 |[0m[0m          else [;1m[31mfindDefault' pr[0m[0m
[;1m[34m   |[0m[0m[;1m[31m               ^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1msrc\Main.hs:84:5: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    * Couldn't match type `Distribution.Types.UnqualComponentName.UnqualComponentName'
                     with `[Char]'
      Expected type: IO [String]
        Actual type: IO
                       [Distribution.Types.UnqualComponentName.UnqualComponentName]
    * In a stmt of a 'do' block: return $ getExecutables pkgParseResult
      In the expression:
        do pr <- fromMaybe (error "No project root found")
                   <$> getCabalProjectRootCurrent
           cfp <- fromMaybe (error "No cabal file found")
                    <$>
                      (find ((== ".cabal") . takeExtension) <$> getDirectoryContents pr)
           pkgParseResult <- getPackageDescription (pr </> cfp)
           return $ getExecutables pkgParseResult
      In an equation for `getExecutables':
          getExecutables
            = do pr <- fromMaybe (error "No project root found")
                         <$> getCabalProjectRootCurrent
                 cfp <- fromMaybe (error "No cabal file found")
                          <$>
                            (find ((== ".cabal") . takeExtension) <$> getDirectoryContents pr)
                 pkgParseResult <- getPackageDescription (pr </> cfp)
                 ....
            where
                getPackageDescription p = parsePackageDescription <$> readFile p
                getExecutables (ParseFailed _) = error "Failed to parse cabal file"
                getExecutables (ParseOk _ gpd)
                  = case condExecutables gpd of
                      [] -> error "No executables found"
                      ds -> map fst ds[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m84 |[0m[0m     [;1m[31mreturn $ getExecutables pkgParseResult[0m[0m
[;1m[34m   |[0m[0m[;1m[31m     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m